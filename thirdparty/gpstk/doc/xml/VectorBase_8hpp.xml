<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="VectorBase_8hpp" kind="file">
    <compoundname>VectorBase.hpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>ident<sp/>&quot;$Id$&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor">#ifndef<sp/>GPSTK_VECTOR_BASE_HPP</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>GPSTK_VECTOR_BASE_HPP</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>GPSTk,<sp/>the<sp/>GPS<sp/>Toolkit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>The<sp/>GPSTk<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>The<sp/>GPSTk<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>License<sp/>along<sp/>with<sp/>GPSTk;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/>02110,<sp/>USA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>2004,<sp/>The<sp/>University<sp/>of<sp/>Texas<sp/>at<sp/>Austin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;valarray&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Exception_8hpp" kindref="compound">Exception.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MathBase_8hpp" kindref="compound">MathBase.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gpstk</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal">NEW_EXCEPTION_CLASS(VectorException,<sp/>gpstk::Exception);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>There<sp/>were<sp/>two<sp/>overriding<sp/>philosophies<sp/>to<sp/>the<sp/>vector<sp/>and<sp/>matrix<sp/>classes:</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>The<sp/>concept<sp/>of<sp/>&quot;const&quot;<sp/>and<sp/>&quot;reference&quot;<sp/>(i.e.<sp/>changable)<sp/>vector</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>and<sp/>matrix<sp/>types<sp/>both<sp/>exist,<sp/>so<sp/>that<sp/>any<sp/>Const*<sp/>type<sp/>could<sp/>not<sp/>be<sp/>altered</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>while<sp/>Ref*<sp/>types<sp/>can.<sp/><sp/>This<sp/>allowed<sp/>one<sp/>to<sp/>add<sp/>the<sp/>slice<sp/>classes<sp/>that<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>let<sp/>you<sp/>use<sp/>a<sp/>subset<sp/>of<sp/>a<sp/>vector<sp/>and<sp/>modify<sp/>(or<sp/>not<sp/>if<sp/>it&apos;s<sp/>const)<sp/>the</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>original<sp/>vector.<sp/><sp/>Furthermore,<sp/>it<sp/>allowed<sp/>slice<sp/>and<sp/>non-slice<sp/>classes</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>to<sp/>interoperate<sp/>through<sp/>the<sp/>ConstVectorBase<sp/>or<sp/>ConstMatrixBase<sp/>classes,<sp/>so,<sp/>for<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>example,<sp/>operator*<sp/>only<sp/>needs<sp/>to<sp/>be<sp/>written<sp/>in<sp/>terms<sp/>of<sp/>ConstVectorBase<sp/>to</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>work<sp/>correctly<sp/>with<sp/>Vector,<sp/>VectorSlice<sp/>and<sp/>ConstVectorSlice.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>Remember<sp/>that<sp/>a<sp/>slice<sp/>MUST<sp/>refer<sp/>to<sp/>a<sp/>vector<sp/>or<sp/>matrix;<sp/>you<sp/>cannot<sp/>have</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>a<sp/>slice<sp/>independent<sp/>of<sp/>a<sp/>base<sp/>vector<sp/>or<sp/>matrix.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>In<sp/>the<sp/>future:</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>-<sp/>Change<sp/>the<sp/>math<sp/>operators<sp/>to<sp/>template<sp/>expressions.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>-<sp/>Add<sp/>general<sp/>slices<sp/>and<sp/>diagonal<sp/>matrix<sp/>slices.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>-<sp/>Make<sp/>range<sp/>checking<sp/>more<sp/>consistent.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>-<sp/>Make<sp/>operator=<sp/>and<sp/>copy<sp/>constructors<sp/>consistent<sp/>between<sp/>const<sp/>and</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/>non-const<sp/>versions.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>-<sp/>Reevaluate<sp/>the<sp/>need<sp/>for<sp/>default<sp/>slice<sp/>constructors...?</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>-<sp/>find<sp/>a<sp/>way<sp/>for<sp/>LUD<sp/>and<sp/>SVD<sp/>to<sp/>use<sp/>the<sp/>template<sp/>type<sp/>of<sp/>the<sp/>parameters</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/><sp/>rather<sp/>than<sp/>specified<sp/>when<sp/>the<sp/>object<sp/>is<sp/>created.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>-<sp/>come<sp/>up<sp/>with<sp/>a<sp/>policy<sp/>for<sp/>when<sp/>zeroize()<sp/>will<sp/>be<sp/>used<sp/>before<sp/>results</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/><sp/>are<sp/>returned.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>@warning<sp/>MSVC<sp/>cant<sp/>deal<sp/>with<sp/>cmath<sp/>header.<sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>Changes<sp/>to<sp/>accomidate<sp/>this<sp/>may<sp/>break<sp/>complex!</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseClass&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConstVectorBase</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ConstVectorBase()<sp/>{}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="94"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">BaseClass*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;size();<sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>operator[]<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constVectorRef(i);<sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>operator()<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constVectorRef(i);<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>constVectorRef(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(VectorException)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseClass&amp;<sp/>b<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">BaseClass&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RANGECHECK</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>b.size())</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorException<sp/>e(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>ConstVectorBase<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPSTK_THROW(e);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b[i];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RefVectorBaseHelper</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zeroTolerance;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseClass&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RefVectorBase<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>RefVectorBaseHelper</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>RefVectorBase()<sp/>{}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;<sp/>operator[]<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vecRef(i);<sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;<sp/>operator()<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vecRef(i);<sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BaseClass&amp;<sp/>zeroize()</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseClass&amp;<sp/>me<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">BaseClass&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);<sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>me.size();<sp/>i++)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ABS(me[i])<sp/>&lt;<sp/>zeroTolerance)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>me[i]<sp/>=<sp/>T(0);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>me;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VecBaseArrayAssignMacroDontCheckRange(func)<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/>BaseClass&amp;<sp/>me<sp/>=<sp/>static_cast&lt;BaseClass&amp;&gt;(*this);<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/>size_t<sp/>i;<sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>me.size();<sp/>i++)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>me[i]<sp/>func<sp/>x[i];<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>me;</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RANGECHECK</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VecBaseArrayAssignMacro(func)<sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/>BaseClass&amp;<sp/>me<sp/>=<sp/>static_cast&lt;BaseClass&amp;&gt;(*this);<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(x.size()<sp/>!=<sp/>me.size())<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorException<sp/>e(&quot;Unequal<sp/>lengths<sp/>for<sp/>vectors&quot;);<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPSTK_THROW(e);<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/>size_t<sp/>i;<sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>me.size();<sp/>i++)<sp/>me[i]<sp/>func<sp/>x[i];<sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>me;</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VecBaseArrayAssignMacro(func)<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor">VecBaseArrayAssignMacroDontCheckRange(func)</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VecBaseAtomicAssignMacro(func)<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/>BaseClass&amp;<sp/>me<sp/>=<sp/>static_cast&lt;BaseClass&amp;&gt;(*this);<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/>size_t<sp/>i;<sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>me.size();<sp/>i++)<sp/>me[i]<sp/>func<sp/>x;<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>me;</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VecBaseNewAssignOperator(funcName,<sp/>op)<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/>template<sp/>&lt;class<sp/>E&gt;<sp/>BaseClass&amp;<sp/>funcName(const<sp/>ConstVectorBase&lt;T,<sp/>E&gt;&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>VecBaseArrayAssignMacro(op)<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/>BaseClass&amp;<sp/>funcName(const<sp/>std::valarray&lt;T&gt;&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>VecBaseArrayAssignMacro(op)<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/>BaseClass&amp;<sp/>funcName(const<sp/>T*<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>VecBaseArrayAssignMacroDontCheckRange(op)<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/>BaseClass&amp;<sp/>funcName(T<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>VecBaseAtomicAssignMacro(op)<sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewAssignOperator(assignFrom,<sp/>=);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewAssignOperator(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">+=,<sp/>+=);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewAssignOperator(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">-=,<sp/>-=);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewAssignOperator(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">*=,<sp/>*=);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewAssignOperator(</highlight><highlight class="keyword">operator</highlight><highlight class="normal">/=,<sp/>/=);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>unary<sp/>minus:<sp/>multiplies<sp/>each<sp/>element<sp/>of<sp/>this<sp/>vector<sp/>by<sp/>-1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//BaseClass&amp;<sp/>operator-()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>T<sp/>x=T(-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>VecBaseAtomicAssignMacro(*=);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unary<sp/>minus<sp/>must<sp/>not<sp/>return<sp/>an<sp/>l-value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseClass<sp/>operator-()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="220"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>x=T(-1);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseClass<sp/>me<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">BaseClass</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>me.size();<sp/>i++)<sp/>me(i)<sp/>*=<sp/>x;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>me;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T&amp;<sp/>vecRef(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(VectorException)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseClass&amp;<sp/>b<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">BaseClass&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RANGECHECK</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>b.size())</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorException<sp/>e(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>VectorBase<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPSTK_THROW(e);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b[i];<sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseClass&gt;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VectorSliceBase</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>VectorSliceBase()<sp/>{}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="257"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">BaseClass*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;size();<sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="260"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">BaseClass*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;start();<sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stride()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="263"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">BaseClass*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;stride();<sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vecSliceCheck(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sourceSize)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(VectorException)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RANGECHECK</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sanity<sp/>checks...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(start()<sp/>&gt;=<sp/>sourceSize)<sp/>||</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((start()<sp/>+<sp/>(size()<sp/>-<sp/>1)<sp/>*<sp/>stride())<sp/>&gt;=<sp/>sourceSize)<sp/>)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorException<sp/>e(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>range<sp/>for<sp/>slice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPSTK_THROW(e);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseClass&gt;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConstVectorSliceBase<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>VectorSliceBase&lt;BaseClass&gt;,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ConstVectorSliceBase()<sp/>{}</highlight></codeline>
<codeline lineno="292"><highlight class="normal">};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseClass&gt;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RefVectorSliceBase<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>VectorSliceBase&lt;BaseClass&gt;,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>RefVectorBase&lt;T,<sp/>BaseClass&gt;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>RefVectorSliceBase()<sp/>{}</highlight></codeline>
<codeline lineno="304"><highlight class="normal">};</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gpstk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="VectorBaseOperators_8hpp" kindref="compound">VectorBaseOperators.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//GPSTK_VECTOR_BASE_HPP</highlight></codeline>
    </programlisting>
    <location file="/home/asymingt/Dropbox/Documents/UCL/Research/Simulator/uas_framework/thirdparty/gpstk/lib/Math/Vector/VectorBase.hpp"/>
  </compounddef>
</doxygen>
