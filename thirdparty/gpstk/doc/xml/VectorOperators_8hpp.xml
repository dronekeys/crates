<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="VectorOperators_8hpp" kind="file">
    <compoundname>VectorOperators.hpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>ident<sp/>&quot;$Id$&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor">#ifndef<sp/>GPSTK_VECTOR_OPERATORS_HPP</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>GPSTK_VECTOR_OPERATORS_HPP</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>GPSTk,<sp/>the<sp/>GPS<sp/>Toolkit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>The<sp/>GPSTk<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>The<sp/>GPSTk<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>License<sp/>along<sp/>with<sp/>GPSTk;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/>02110,<sp/>USA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>2004,<sp/>The<sp/>University<sp/>of<sp/>Texas<sp/>at<sp/>Austin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gpstk</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VecBaseNewUnaryOperator(func)<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T,<sp/>class<sp/>BaseClass&gt;<sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/><sp/>Vector&lt;T&gt;<sp/>func(const<sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;&amp;<sp/>x)<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseClass<sp/>toReturn(x.size());<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>i;<sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>x.size();<sp/>i++)<sp/>toReturn[i]<sp/>=<sp/>func(x[i]);<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>toReturn;<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>VecBaseNewUnaryOperator(-)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/>VecBaseNewUnaryOperator(abs)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(acos)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(asin)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(atan)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(cos)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(cosh)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(exp)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(log)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(log10)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(sinh)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(sin)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(sqrt)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(tan)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewUnaryOperator(tanh)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VecBaseNewBinaryOperator(func,<sp/>retval)<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor">template<sp/>&lt;class<sp/>T,<sp/>class<sp/>BaseClass,<sp/>class<sp/>BaseClass2&gt;<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor">retval<sp/>operator<sp/>func(const<sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;&amp;<sp/>l,<sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ConstVectorBase&lt;T,<sp/>BaseClass2&gt;&amp;<sp/>r)<sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(l.size()<sp/>!=<sp/>r.size())<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>VectorException<sp/>e(&quot;Unequal<sp/>lengths<sp/>vectors&quot;);<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GPSTK_THROW(e);<sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/>retval<sp/>toReturn(l.size());<sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/>size_t<sp/>i;<sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>l.size();<sp/>i++)<sp/>toReturn[i]<sp/>=<sp/>l[i]<sp/>func<sp/>r[i];<sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>toReturn;<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor">template<sp/>&lt;class<sp/>T,<sp/>class<sp/>BaseClass&gt;<sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor">retval<sp/>operator<sp/>func(const<sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;&amp;<sp/>l,<sp/>const<sp/>T<sp/>r)<sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/>retval<sp/>toReturn(l.size());<sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/>size_t<sp/>i;<sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>l.size();<sp/>i++)<sp/>toReturn[i]<sp/>=<sp/>l[i]<sp/>func<sp/>r;<sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>toReturn;<sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor">template<sp/>&lt;class<sp/>T,<sp/>class<sp/>BaseClass&gt;<sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor">retval<sp/>operator<sp/>func(const<sp/>T<sp/>l,<sp/>const<sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;&amp;<sp/>r)<sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/>retval<sp/>toReturn(r.size());<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/>size_t<sp/>i;<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>r.size();<sp/>i++)<sp/>toReturn[i]<sp/>=<sp/>l<sp/>func<sp/>r[i];<sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>toReturn;<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor">}<sp/></highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(*,<sp/>Vector&lt;T&gt;)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(/,<sp/>Vector&lt;T&gt;)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(%,<sp/>Vector&lt;T&gt;)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(+,<sp/>Vector&lt;T&gt;)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(-,<sp/>Vector&lt;T&gt;)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(^,<sp/>Vector&lt;T&gt;)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(&amp;,<sp/>Vector&lt;T&gt;)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(|,<sp/>Vector&lt;T&gt;)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(==,<sp/>Vector&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(&lt;,<sp/>Vector&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(&gt;,<sp/>Vector&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(!=,<sp/>Vector&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(&lt;=,<sp/>Vector&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryOperator(&gt;=,<sp/>Vector&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VecBaseNewBinaryTranscendentalOperator(func,<sp/>retval)<sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T,<sp/>class<sp/>BaseClass,<sp/>class<sp/>BaseClass2&gt;<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/>retval<sp/>func(const<sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;&amp;<sp/>l,<sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ConstVectorBase&lt;T,<sp/>BaseClass2&gt;&amp;<sp/>r)<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>toReturn(l.size());<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>i;<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>l.size();<sp/>i++)<sp/>toReturn[i]<sp/>=<sp/>func(l[i],<sp/>r[i]);<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>toReturn;<sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor">template<sp/>&lt;class<sp/>T,<sp/>class<sp/>BaseClass&gt;<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor">retval<sp/>func(const<sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;&amp;<sp/>l,<sp/>const<sp/>T<sp/>r)<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/>retval<sp/>toReturn(l.size());<sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/>size_t<sp/>i;<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>l.size();<sp/>i++)<sp/>toReturn[i]<sp/>=<sp/>func(l[i],<sp/>r);<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>toReturn;<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor">template<sp/>&lt;class<sp/>T,<sp/>class<sp/>BaseClass&gt;<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor">retval<sp/>func(const<sp/>T<sp/>l,<sp/>const<sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;&amp;<sp/>r)<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/>retval<sp/>toReturn(r.size());<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/>size_t<sp/>i;<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>r.size();<sp/>i++)<sp/>toReturn[i]<sp/>=<sp/>func(l,<sp/>r[i]);<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>toReturn;<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor">}<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryTranscendentalOperator(atan,<sp/>Vector&lt;T&gt;)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VecBaseNewBinaryTranscendentalOperator(pow,<sp/>Vector&lt;T&gt;)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T,<sp/>class<sp/>BaseClass,<sp/>class<sp/>BaseClass2&gt;<sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>Vector&lt;T&gt;<sp/>cross(const<sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;&amp;<sp/>l,<sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ConstVectorBase&lt;T,<sp/>BaseClass2&gt;&amp;<sp/>r)<sp/>throw(VectorException)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((l.size()<sp/>!=<sp/>3)<sp/>&amp;&amp;<sp/>(r.size()<sp/>!=<sp/>3))</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorException<sp/>e(</highlight><highlight class="stringliteral">&quot;Cross<sp/>product<sp/>requires<sp/>vectors<sp/>of<sp/>size<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GPSTK_THROW(e);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/>BaseClass<sp/>toReturn(3);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/>toReturn[0]<sp/>=<sp/>l[1]<sp/>*<sp/>r[2]<sp/>-<sp/>l[2]<sp/>*<sp/>r[1];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>toReturn[1]<sp/>=<sp/>l[2]<sp/>*<sp/>r[0]<sp/>-<sp/>l[0]<sp/>*<sp/>r[2];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/>toReturn[2]<sp/>=<sp/>l[0]<sp/>*<sp/>r[1]<sp/>-<sp/>l[1]<sp/>*<sp/>r[0];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toReturn;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseClass&gt;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">Vector&lt;T&gt;<sp/>normalize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;&amp;<sp/>l)<sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l<sp/>/<sp/>norm(l);<sp/>}<sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseClass&gt;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">T<sp/>RSS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;&amp;<sp/>l)<sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>norm(l);<sp/>}<sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseClass&gt;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">T<sp/>RMS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstVectorBase&lt;T,<sp/>BaseClass&gt;&amp;<sp/>l)<sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>norm(l)/SQRT(T(l.size()));<sp/>}<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/asymingt/Dropbox/Documents/UCL/Research/Simulator/uas_framework/thirdparty/gpstk/lib/Math/Vector/VectorOperators.hpp"/>
  </compounddef>
</doxygen>
